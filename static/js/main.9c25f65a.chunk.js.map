{"version":3,"sources":["components/Leaf/index.js","data.js","components/DetailsSection/index.js","App.js","serviceWorker.js","index.js","assets/images/anna.jpg"],"names":["Leaf","props","react_default","a","createElement","className","src","avatar","alt","data","age","songs","books","cartoons","food","like","dontLike","photos","videos","withStyles","theme","root","width","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","classes","map","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","Typography_default","ExpansionPanelDetails_default","Object","keys","prop","key","Array","isArray","join","components_Leaf","DetailsSection","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"+KAkBeA,MAbf,SAAcC,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAQF,UAAU,SAASG,IAAI,gBACzCN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,iBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,OAAb,qGCVOI,SAAO,CAAC,CACjBC,IAAI,EACJC,MAAO,CACH,gHACA,sDACA,iBACA,qLACA,cAEJC,MAAO,CACH,mBAEJC,SAAU,CACN,oBACA,0DAEJC,KAAM,CAAC,6CAAW,mDAAY,oDAC9BC,KAAM,GACNC,SAAU,GACVC,OAAQ,GACRC,OAAQ,MCkCGC,2BAzCA,SAAAC,GAAK,MAAK,CACvBC,KAAM,CACJC,MAAO,QAETC,QAAS,CACPC,SAAUJ,EAAMK,WAAWC,QAAQ,IACnCC,WAAYP,EAAMK,WAAWG,qBAmClBT,CA/Bf,SAA8BlB,GAAO,IAC3B4B,EAAY5B,EAAZ4B,QACR,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAWwB,EAAQR,MACrBZ,EAAKqB,IAAI,SAAArB,GAAI,OACZP,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,KACED,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,CAAuB8B,WAAY/B,EAAAC,EAAAC,cAAC8B,EAAA/B,EAAD,OACjCD,EAAAC,EAAAC,cAAC+B,EAAAhC,EAAD,CAAYE,UAAWwB,EAAQN,SAA/B,eAAqDd,EAAKC,MAE5DR,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,CAAuBE,UAAU,mBAC5BgC,OACEC,KAAK7B,GACLqB,IAAI,SAAAS,GAAI,OACNrC,EAAAC,EAAAC,cAAA,OAAKoC,IAAKD,GACTrC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAASkC,EAAzB,MACArC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAASoC,MAAMC,QAAQjC,EAAK8B,IAAS9B,EAAK8B,GAAMI,KAAK,MAAQlC,EAAK8B,cCPvFpB,2BAxBA,SAAAC,GAAK,MAAK,CACvBC,KAAM,CACJC,MAAO,QAETC,QAAS,CACPC,SAAUJ,EAAMK,WAAWC,QAAQ,IACnCC,WAAYP,EAAMK,WAAWG,qBAkBlBT,CAdf,SAAalB,GAAO,IACV4B,EAAY5B,EAAZ4B,QACR,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAWwB,EAAQR,MACtBnB,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAACyC,EAAD,SCVcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.9c25f65a.chunk.js","sourcesContent":["import React from 'react';\n// import PropTypes from 'prop-types';\nimport './styles.css';\nimport avatar from '../../assets/images/anna.jpg';\n\nfunction Leaf(props) {\n  return (\n    <div className=\"leaf\">\n      <img src={avatar} className=\"avatar\" alt=\"leaf avatar\"/>\n      <p className=\"name\">Anna Tataryna</p>\n      <p className=\"dob\">11/12/2016</p>\n    </div>\n  );\n}\n\n// Leaf.propTypes = {\n// };\n\nexport default Leaf;","export const data = [{\r\n    age:2,\r\n    songs: [\r\n        'Мерии Поппис - 33 Коровы',\r\n        'Nikita - Авокадо',\r\n        'Danger - 11h30',\r\n        'ГРебенщиков- Марш священных коров',\r\n        'Pentatonix'\r\n    ],\r\n    books: [\r\n        'For rebel girls'\r\n    ],\r\n    cartoons: [\r\n        'Bedronka/Lady Bug',\r\n        'Русалочка'\r\n    ],\r\n    food: ['Сметана', 'Виноград', 'Макароны'],\r\n    like: [],\r\n    dontLike: [],\r\n    photos: [],\r\n    videos: []\r\n}];\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport './styles.css';\n\nimport { data } from '../../data';\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n});\n\nfunction SimpleExpansionPanel(props) {\n  const { classes } = props;\n  return (\n    <div className={classes.root}>\n      {data.map(data=>\n        <ExpansionPanel>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography className={classes.heading}>My age is - {data.age}</Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails className=\"details-wrapper\">\n              {Object\n                .keys(data)\n                .map(prop => \n                  (<div key={prop}>\n                    <span className=\"title\">{prop}: </span>\n                    <span className=\"value\">{Array.isArray(data[prop]) ? data[prop].join(', ') : data[prop]}</span>\n                  </div>)\n                )\n              }\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      )}\n\n    </div>\n  );\n}\n\nSimpleExpansionPanel.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SimpleExpansionPanel);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Leaf from './components/Leaf';\nimport PersonDetails from './components/DetailsSection';\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n});\n\nfunction App(props) {\n  const { classes } = props;\n  return (\n    <div className={classes.root}>\n      <Leaf />\n      <PersonDetails />\n    </div>\n  );\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/anna.4857c3a7.jpg\";"],"sourceRoot":""}